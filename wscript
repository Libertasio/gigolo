#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# WAF build script
#
# Copyright 2008-2011 Enrico Tr√∂ger <enrico(at)xfce(dot)org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.



import os
from waflib import Logs, Options, Scripting
from waflib.TaskGen import feature


APPNAME = 'gigolo'
VERSION = '0.4.1'
LINGUAS_FILE = 'po/LINGUAS'

top = '.'
out = '_build_'


sources = ['src/compat.c', 'src/window.c', 'src/bookmark.c', 'src/settings.c',
           'src/menubuttonaction.c', 'src/mountoperation.c', 'src/bookmarkdialog.c',
           'src/bookmarkeditdialog.c', 'src/preferencesdialog.c', 'src/backendgvfs.c',
           'src/common.c', 'src/mountdialog.c', 'src/browsenetworkpanel.c',
           'src/singleinstance.c', 'src/bookmarkpanel.c']



def configure(conf):
    conf.load('compiler_c intltool gnu_dirs waf_unit_test')

    conf.check_cfg(package='gtk+-2.0', atleast_version='2.12.0', uselib_store='GTK',
        mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='gio-2.0', atleast_version='2.16.0', uselib_store='GIO',
        mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='x11', uselib_store='X11', mandatory=True, args='--libs')

    gtk_version = conf.check_cfg(modversion='gtk+-2.0', uselib_store='GTK')
    gio_version = conf.check_cfg(modversion='gio-2.0', uselib_store='GIO')

    conf.define('GETTEXT_PACKAGE', APPNAME, 1)
    conf.define('PACKAGE', APPNAME, 1)
    conf.define('VERSION', VERSION, 1)

    conf.write_config_header('config.h', remove=False)

    if 'LINGUAS' in os.environ:
        conf.env['LINGUAS'] = os.environ['LINGUAS']

    # debug flags
    if conf.options.debug:
        conf.env.append_value('CCFLAGS', '-g -O0 -DDEBUG '.split())

    Logs.pprint('BLUE', 'Summary:')
    conf.msg('Install Gigolo ' + VERSION + ' in', conf.env['PREFIX'])
    conf.msg('Using GTK version', gtk_version or 'Unknown')
    conf.msg('Using GIO version', gio_version or 'Unknown')
    conf.msg('Compiling with debugging support', conf.options.debug and 'yes' or 'no')


def options(opt):
    opt.load('compiler_cc intltool gnu_dirs waf_unit_test')

    opt.add_option('--enable-debug', action='store_true', default=False,
        help='enable debug mode [default: No]', dest='debug')


def _remove_linguas_file():
    try:
        os.unlink(LINGUAS_FILE)
    except OSError:
        pass


@feature('linguas')
def write_linguas_file(self):
    if os.path.exists(LINGUAS_FILE):
        return
    linguas = ''
    if 'LINGUAS' in self.env:
        files = self.env['LINGUAS']
        for po_filename in files.split(' '):
            if os.path.exists ('po/%s.po' % po_filename):
                linguas += '%s ' % po_filename
    else:
        files = os.listdir('%s/po' % self.path.abspath())
        files.sort()
        for filename in files:
            if filename.endswith('.po'):
                linguas += '%s ' % filename[:-3]
    file_h = open(LINGUAS_FILE, 'w')
    file_h.write('# This file is autogenerated. Do not edit.\n%s\n' % linguas)
    file_h.close()


def distclean(ctx):
    Scripting.distclean(ctx)
    _remove_linguas_file()


def build(bld):
    if bld.cmd == 'clean':
        _remove_linguas_file()

    bld.new_task_gen(
        features        = 'c cstlib',
        name            = 'gigolo_lib',
        target          = 'gigolo_lib',
        source          = sources,
        includes        = '.',
        uselib          = ['GTK', 'GIO'],
        install_path    = None)

    bld.new_task_gen(
        features        = 'c cprogram',
        name            = 'gigolo',
        target          = 'gigolo',
        source          = 'src/main.c',
        includes        = '.',
        use             = ['GTK', 'GIO', 'X11', 'gigolo_lib'])

    # tests
    bld(
        features        = 'c cprogram test',
        source          = 'tests/uri_parsing.c',
        target          = 'test-uri-parsing',
        includes        = ['.', 'src'],
        use             = ['GTK', 'GIO', 'X11', 'gigolo_lib'],
        install_path    = None)
    bld.add_post_fun(_unit_test_summary)

    # Translations
    bld.new_task_gen(
        features        = ['linguas', 'intltool_po'],
        podir           = 'po',
        install_path    = '${LOCALEDIR}',
        appname         = 'gigolo')

    # gigolo.desktop
    bld.new_task_gen(
        features        = 'intltool_in',
        source          = 'gigolo.desktop.in',
        flags           = ['-d', '-q', '-u', '-c'],
        install_path    = '${DATADIR}/applications',
        after           = 'intltool_po')

    # gigolo.1
    bld.new_task_gen(
        features        = 'subst',
        source          = 'gigolo.1.in',
        target          = 'gigolo.1',
        dct            = {'VERSION' : VERSION},
        install_path    = '${MANDIR}/man1')

    # Docs
    bld.install_files('${DOCDIR}', 'AUTHORS ChangeLog COPYING README NEWS TODO')


def _unit_test_summary(ctx):
    lst = getattr(ctx, 'utest_results', [])
    if lst:
        Logs.pprint('CYAN', 'Execution summary:')

        total = len(lst)
        tfail = len([x for x in lst if x[1]])

        Logs.pprint('CYAN', '  Passed tests: %d/%d' % (total-tfail, total))
        for (filename, code, stdout, stderr) in lst:
            if not code:
                Logs.pprint('CYAN', '    %s' % filename)

        Logs.pprint('CYAN', '  Failed tests: %d/%d' % (tfail, total))
        for (filename, code, stdout, stderr) in lst:
            if code:
                Logs.pprint('CYAN', '%s:' % filename)
                Logs.pprint('RED', '%s' % stdout)


def updatepo(ctx):
    """update the message catalogs for internationalization"""
    potfile = '%s.pot' % APPNAME
    os.chdir('%s/po' % top)
    try:
        try:
            old_size = os.stat(potfile).st_size
        except OSError:
            old_size = 0
        ctx.exec_command('intltool-update --pot -g %s' % APPNAME)
        size_new = os.stat(potfile).st_size
        if size_new != old_size:
            Logs.pprint('CYAN', 'Updated POT file.')
            Logs.pprint('CYAN', 'Updating translations')
            ret = ctx.exec_command('intltool-update -r -g %s' % APPNAME)
            if ret != 0:
                Logs.pprint('RED', 'Updating translations failed')
        else:
            Logs.pprint('CYAN', 'POT file is up to date.')
    except OSError:
        Logs.pprint('RED', 'Failed to generate pot file.')


def dist(ctx):
    ctx.base_path = ctx.path
    ctx.excl = ctx.get_excl() + 'gigolo-%s.tar.bz2.sig module.xml RUN .gitignore .intlcache' % VERSION


def sign(ctx):
    """sign the source tarball for distribution"""
    from hashlib import md5
    filename = '%s-%s.tar.bz2' % (APPNAME, VERSION)
    md5_hash = md5()
    read_bytes = 100000
    archive_file = file(filename,'rb')
    while read_bytes:
        read_string = archive_file.read(read_bytes)
        md5_hash.update(read_string)
        read_bytes = len(read_string)
    archive_file.close()

    ctx.cmd_and_log('gpg --detach-sign --digest-algo SHA512 %s' % filename)
    Logs.pprint('GREEN', 'MD5 sum: %s %s' % (filename, md5_hash.hexdigest()))

