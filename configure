#!/bin/sh

# waf configure wrapper

# Fancy colors used to beautify the output a bit.
#
if [ "$NOCOLOR" ] ; then
    NORMAL=""
    BOLD=""
    RED=""
    YELLOW=""
    GREEN=""
else
    NORMAL="\\x1b[0m"
    BOLD="\\x1b[01;1m"
    RED="\\x1b[01;91m"
    YELLOW="\\x1b[33m"
    GREEN="\\x1b[32m"
fi

EXIT_SUCCESS=0
EXIT_FAILURE=1
EXIT_ERROR=2
EXIT_BUG=10

CUR_DIR=$PWD

#possible relative path
WORKINGDIR=`dirname $0`
cd $WORKINGDIR
#abs path
WORKINGDIR=`pwd`
cd $CUR_DIR


# Checks for Python interpreter. Honours $PYTHON if set. Stores path to
# interpreter in $PYTHON.
#
checkPython()
{
	if [ -z "$PYTHON" ] ; then
		PYTHON=`which python 2>/dev/null`
	fi
	printf "Checking for Python\t\t\t:  "
	if [ ! -x "$PYTHON" ] ; then
		printf $RED"not found!"$NORMAL"\n"
		echo "Please make sure that the Python interpreter is available in your PATH"
		echo "or invoke configure using the PYTHON flag, e.g."
		echo "$ PYTHON=/usr/local/bin/python configure"
		exit $EXIT_FAILURE
	fi
	printf $GREEN"$PYTHON"$NORMAL"\n"
}

# Checks for WAF. Honours $WAF if set. Stores path to 'waf' in $WAF.
# Requires that $PYTHON is set.
#
checkWAF()
{
	printf "Checking for WAF\t\t\t:  "
	#installed miniwaf in sourcedir
	if [ -z "$WAF" ] ; then
		if [ -f "${WORKINGDIR}/waf" ] ; then
			WAF="${WORKINGDIR}/waf"
			if [ ! -x "$WAF" ] ; then
				chmod +x $WAF
			fi
		fi
	fi
	if [ -z "$WAF" ] ; then
		if [ -f "${WORKINGDIR}/waf-light" ] ; then
			${WORKINGDIR}/waf-light --make-waf
			WAF="${WORKINGDIR}/waf"
		fi
	fi
	#global installed waf with waf->waf.py link
	if [ -z "$WAF" ] ; then
		WAF=`which waf 2>/dev/null`
	fi
	# neither waf nor miniwaf could be found
	if [ ! -x "$WAF" ] ; then
		printf $RED"not found"$NORMAL"\n"
		echo "Go to http://code.google.com/p/waf/"
		echo "and download a waf version"
		exit $EXIT_FAILURE
	else
		printf $GREEN"$WAF"$NORMAL"\n"
	fi
}

# Generates a Makefile. Requires that $WAF is set.
#
generateMakefile()
{
	cat > Makefile << EOF
#!/usr/bin/make -f
# Waf Makefile wrapper

all:
	@$WAF build

all-debug:
	@$WAF -v build

all-progress:
	@$WAF -p build

install:
	@if test -n "\$(DESTDIR)"; then \\
		$WAF install --destdir="\$(DESTDIR)"; \\
	else \\
		$WAF install; \\
	fi;

uninstall:
	@if test -n "\$(DESTDIR)"; then \\
		$WAF uninstall --destdir="\$(DESTDIR)"; \\
	else \\
		$WAF uninstall; \\
	fi;

clean:
	@$WAF clean

distclean:
	@$WAF distclean
	@-rm -rf _build_
	@-rm -f Makefile

distcheck:
	@$WAF distcheck

dist:
	@$WAF dist

sign:
	@$WAF --sign

.PHONY: clean dist distclean check uninstall install all

EOF

	cat > src/Makefile << EOF
#!/usr/bin/make -f
# Waf Makefile wrapper

all:
	cd .. && $WAF build

all-debug:
	cd .. && $WAF -v build

clean:
	cd .. && $WAF clean

EOF
}

checkPython
checkWAF

generateMakefile

"${WAF}" configure $@

exit $?
